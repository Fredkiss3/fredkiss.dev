---
import { Image } from "astro:assets";
import { getCollection } from "astro:content";
import Icon from "~/components/icon.astro";
import portraitImage from "~/images/headshot.png";
import onBikeimage from "~/images/on-bike.jpeg";
import BaseLayout from "~/layouts/base-layout.astro";
import { formattedDate, capitalize } from "~/lib/utils";
import { locales } from "~/i18n/config.mjs";

const totalYearsXP = new Date().getFullYear() - 2021;
const totalYearsDev = new Date().getFullYear() - 2017;

const workExperiences = (await getCollection("work")).sort(
  (a, b) => b.data.startDate.getTime() - a.data.startDate.getTime()
);

const projects = (await getCollection("projects")).sort(
  (a, b) => b.data.startDate.getTime() - a.data.startDate.getTime()
);

export async function getStaticPaths() {
  return [
    {
      params: { locale: "en" },
    },
    {
      params: { locale: "fr" },
    },
  ];
}
const { locale } = Astro.params;
if (!locales.includes(locale)) {
  throw Astro.rewrite("/404");
}
---

<BaseLayout locale={locale}>
  <section id="banner" class="flex items-end gap-4 justify-between">
    <div class="flex flex-col gap-4">
      <h1 class="text-xl font-medium">Fred Kissie</h1>

      <dl class="flex flex-col gap-2">
        <div class="flex items-start gap-2">
          <dt>
            <span class="sr-only">Location</span>
            <Icon type="map-pin" class="size-4 relative top-1" />
          </dt>
          <dd>Rennes, France</dd>
        </div>
        <div class="flex items-start gap-2">
          <dt>
            <span class="sr-only">Occupation</span>
            <Icon type="suitcase" class="size-4 relative top-1" />
          </dt>
          <dd>Full-stack developer & Devops</dd>
        </div>
      </dl>
    </div>

    <div class="group relative flex-none size-32 md:size-40">
      <Image
        src={portraitImage}
        alt="Portrait of Fred KISSIE"
        width={500}
        height={500}
        loading="eager"
        class:list={[
          "inline absolute inset-0",
          "rounded-md object-center object-cover border-zinc-700 dark:border-white border-2",
          "group-hover:rotate-0 -rotate-6 transition duration-150",
          "md:group-hover:opacity-0",
        ]}
      />
      <Image
        src={onBikeimage}
        alt="Fred KISSIE on bike"
        width={300}
        height={500}
        loading="eager"
        class:list={[
          "inline absolute top-3 right-0",
          "rounded-md object-top object-cover border-zinc-700 dark:border-white border-2",
          "group-hover:rotate-6 -rotate-6 transition duration-150",
          "aspect-16/9 h-32 md:h-40 min-w-max",
          "opacity-0 md:group-hover:opacity-100",
        ]}
      />
    </div>
  </section>

  <section id="description" class="flex flex-col gap-4">
    <p>
      I am a Software Engineer with over {totalYearsXP}+ years of professional
      experience and more than {totalYearsDev}+ years of coding under my belt.
      When I'm not writing code, youâ€™ll find me exploring the city on my <strong
        >bike</strong
      > or
      <strong>cooking</strong> up some delicious meals. I also stream regularly on
      Twitch, where I share progress on my latest side projects as well do some cooking
      LIVE.
    </p>

    <ul
      class="flex items-center gap-4 text-zinc-600 dark:text-inherit flex-wrap">
      <li>
        <a
          class="inline-flex gap-1.5 items-center"
          href="https://github.com/fredkiss3"
          target="_blank"
          rel="noopener noreferrer">
          <Icon type="github" class="size-4" />
          <span>github</span>
          <Icon type="arrow-external" class="size-4" />
        </a>
      </li>
      <li>
        <button
          class="inline-flex gap-1.5 items-center underline hover:decoration-wavy decoration-[0.1em]"
          id="email">
          <Icon type="arobase" class="size-4" />
          <span>email</span>
          <Icon type="arrow-external" class="size-4" />
        </button>
      </li>
      <li>
        <a
          class="inline-flex gap-1.5 items-center"
          href="https://www.linkedin.com/in/fredhel-kissie-3b6b32162/"
          target="_blank"
          rel="noopener noreferrer">
          <Icon type="linkedin" class="size-4" />
          <span>linkedin</span>
          <Icon type="arrow-external" class="size-4" />
        </a>
      </li>
      <li>
        <a
          class="inline-flex gap-1.5 items-center"
          href="https://bsky.app/profile/fredkiss.dev"
          target="_blank"
          rel="noopener noreferrer">
          <Icon type="bluesky" class="size-5" />
          <span>Bluesky</span>
          <Icon type="arrow-external" class="size-4" />
        </a>
      </li>
      <li>
        <a
          class="inline-flex gap-1.5 items-center"
          href="https://twitter.com/fredkisss"
          target="_blank"
          rel="noopener noreferrer">
          <Icon type="twitter" class="size-4" />
          <span>twitter</span>
          <Icon type="arrow-external" class="size-4" />
        </a>
      </li>
      <li>
        <a
          class="inline-flex gap-1.5 items-center"
          href="https://twitch.tv/fredkisss"
          target="_blank"
          rel="noopener noreferrer">
          <Icon type="twitch" class="size-4" />
          <span>twitch</span>
          <Icon type="arrow-external" class="size-4" />
        </a>
      </li>
    </ul>
  </section>

  <section id="work" class="flex flex-col gap-3">
    <h2 class="text-2xl font-semibold">work</h2>

    <ul class="flex flex-col gap-8">
      {
        workExperiences.map(async entry => {
          const xp = entry.data;
          const { Content } = await entry.render();
          const startDate = formattedDate(xp.startDate);
          const endDate = xp.endDate
            ? `to ${formattedDate(xp.endDate)}`
            : "- present";

          const formattedDateRange =
            xp.startDate.getMonth() === xp.endDate?.getMonth()
              ? startDate
              : `${startDate} ${endDate}`;
          return (
            <li>
              <article class="flex flex-col gap-3">
                <div class="flex flex-col gap-1">
                  <h3 class="text-lg font-semibold">
                    {xp.jobTitle} at
                    <a target="_blank" rel="noopener noreferrer" href={xp.link}>
                      {xp.company}
                    </a>
                  </h3>

                  <h4 class="text-lg">
                    <span>{capitalize(xp.type)}</span>{" "}
                    <span class="lowercase">({formattedDateRange})</span>
                  </h4>
                </div>

                <div class="text-zinc-700/90 dark:text-white/80 [&_ul]:ms-6 [&_ul>li]:list-disc">
                  <Content />
                </div>

                {xp.stack.length > 0 && (
                  <div class="flex gap-2 items-start">
                    <strong class="min-w-max">Tech Stack:</strong>{" "}
                    <span class="flex flex-wrap gap-2">
                      {xp.stack.map((tech, index) => {
                        return tech.link ? (
                          <a href={tech.link} class="flex gap-0 items-center">
                            {tech.name}
                            <Icon type="arrow-external" class="size-3" />
                            {index < xp.stack.length - 1 && ", "}
                          </a>
                        ) : (
                          <span>
                            {tech.name}
                            {index < xp.stack.length - 1 && ", "}
                          </span>
                        );
                      })}
                    </span>
                  </div>
                )}
              </article>
            </li>
          );
        })
      }
    </ul>
  </section>

  <section id="projects" class="flex flex-col gap-3">
    <h2 class="text-2xl font-semibold">projects</h2>
    <ul class="flex flex-col gap-20">
      {
        projects.map(async (entry, index) => {
          const project = entry.data;
          const { Content } = await entry.render();
          const roleFormatted = project.roles.join(" and ");
          return (
            <li>
              <article class="grid grid-cols-6 gap-6">
                <div class="flex flex-col col-span-full md:col-span-4 gap-4">
                  <div class="flex flex-col gap-1">
                    <h3 class="text-lg font-semibold flex items-center gap-2">
                      {project.link ? (
                        <a
                          target="_blank"
                          rel="noopener noreferrer"
                          href={project.link}>
                          {project.name}
                        </a>
                      ) : (
                        <>{project.name}</>
                      )}
                      <span class="inline-flex items-center gap-1 text-amber-600 dark:text-yellow-400 font-normal">
                        <span
                          data-fetch-stars
                          data-slug={entry.slug}
                          data-stars="-"
                          class="before:content-[attr(data-stars)]"
                        />
                        <Icon type="star" class="size-4" />
                      </span>
                      <span class="sr-only">stars</span>
                    </h3>

                    <h4 class="lowercase text-lg">{roleFormatted}</h4>
                  </div>

                  <div class="flex flex-col gap-2">
                    <div class="text-zinc-700/90 dark:text-white/80 [&_ul]:ms-6 [&_ul>li]:list-disc text-balance">
                      <Content />
                    </div>

                    <footer class="">
                      <small class="flex items-center gap-2">
                        <Icon type="github" class="size-3" />
                        <a
                          target="_blank"
                          rel="noopener noreferrer"
                          href={project.repository}>
                          {project.repository}
                        </a>
                        <Icon type="arrow-external" class="size-3" />
                      </small>
                    </footer>
                  </div>
                </div>

                <div
                  class:list={[
                    index % 2 === 0
                      ? "order-last -rotate-6"
                      : "order-first rotate-6",
                    "hidden md:flex",
                    "col-span-2 flex-col justify-center items-center size-full",
                    "hover:rotate-0 transition duration-150",
                  ]}>
                  {typeof project.image === "string" ? (
                    <Image
                      src={project.image}
                      alt={`Screenshot of ${project.name}`}
                      width={500}
                      height={500}
                      loading="lazy"
                      class="rounded-md object-center object-contain w-full"
                    />
                  ) : (
                    <picture class="object-center object-contain w-full rounded-md">
                      <source
                        media="(prefers-color-scheme: dark)"
                        srcset={project.image.dark}
                      />
                      <source
                        media="(prefers-color-scheme: light)"
                        srcset={project.image.light}
                      />
                      <Image
                        src={project.image.light}
                        alt={`Screenshot of ${project.name}`}
                        width={500}
                        height={500}
                        class="object-center object-contain size-full rounded-md"
                      />
                    </picture>
                  )}
                </div>
              </article>
            </li>
          );
        })
      }
    </ul>
  </section>
  <script>
    document.addEventListener("DOMContentLoaded", async () => {
      const emailBtn = document.querySelector(
        "button#email"
      ) as HTMLButtonElement;

      if (emailBtn) {
        emailBtn.addEventListener("click", () => {
          window.location.href =
            "mailto:hello@fredkiss.dev?subject=Contact+Website";
        });
      }

      const stars = document.querySelectorAll("[data-fetch-stars]");

      await Promise.all(
        [...stars].map(async element => {
          const slug = (element as HTMLElement).dataset.slug;
          const response = await fetch(`/api/${slug}/stars.json`).then(
            r => r.json() as Promise<{ stargazerCount: number }>
          );

          (element as HTMLElement).dataset.stars =
            response.stargazerCount.toString();
        })
      );
    });
  </script>
</BaseLayout>
